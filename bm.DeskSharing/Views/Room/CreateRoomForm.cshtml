<head>

    <title>EJ2 Diagram</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Typescript UI Controls">
    <meta name="author" content="Syncfusion">
    
    <script src="~/js/SyncJs/ej2.min.js"></script>
    @*<script src="https://cdn.syncfusion.com/ej2/ej2-vue-es5/dist/ej2-vue.min.js" type="text/javascript"></script>*@
    @*<script src="http://cdn.syncfusion.com/ej2/21.1.35/ej2-diagrams/dist/global/ej2-diagrams.min.js" type="text/javascript"></script>*@
    


</head>
<h1>Create Room and Place Desks here</h1>

<a class="btn btn-Warning" onclick="showCanvas()">Show Canvas</a>
<div id="symbolpalette">
    <button onclick="saveDia()">Save</button>
</div>

<div id="container">
    <div id="element"></div>
</div>
<script>
    var diagram;
    function saveDia(){
        var options = {};
        options.mode = 'Download';
        options.format = 'SVG';
        diagram.exportDiagram(options);
    }

    function showCanvas() {
        //alert("Hello");
        diagram = new ej.diagrams.Diagram({
            width: '100%', height: '600px'
        }, '#element');

        var basicShapes = [{
            id: 'Rectangle',
            shape: {
                type: 'Basic',
                shape: 'Rectangle'
            }
        },
        {
            id: 'Ellipse',
            shape: {
                type: 'Basic',
                shape: 'Ellipse'
            }
        },
        {
            id: 'Hexagon',
            shape: {
                type: 'Basic',
                shape: 'Hexagon'
            }
        }
        ];
        //Initializes the symbol palette
        var palette = new ej.diagrams.SymbolPalette({
            expandMode: 'Multiple',
            palettes: [{
                id: 'basic',
                expanded: true,
                symbols: basicShapes,
                title: 'Please use these objects to Draw your room and Place the Chairs',
                iconCss: 'e-ddb-icons e-basic'
            }],
            symbolHeight: 80,
            symbolWidth: 80,
            getSymbolInfo: (symbol) => {
                if (symbol['text'] !== undefined) {
                    return {
                        width: 75,
                        height: 40,
                        description: {
                            text: symbol['text'],
                            overflow: 'Wrap'
                        }
                    };
                }
                return {
                    width: 75,
                    height: 40,
                    description: {
                        text: symbol.shape['shape']
                    }
                };
            }
        });
        palette.appendTo('#symbolpalette');

    }

</script>